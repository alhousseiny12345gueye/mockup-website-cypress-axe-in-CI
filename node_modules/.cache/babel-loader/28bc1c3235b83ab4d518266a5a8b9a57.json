{"ast":null,"code":"var _excluded = [\"Component\", \"country\", \"defaultCountry\", \"useNationalFormatForDefaultCountryValue\", \"value\", \"onChange\", \"metadata\", \"international\", \"withCountryCallingCode\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _iterableToArrayLimit(r, l) {\n  var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (null != t) {\n    var e,\n      n,\n      i,\n      u,\n      a = [],\n      f = !0,\n      o = !1;\n    try {\n      if (i = (t = t.call(r)).next, 0 === l) {\n        if (Object(t) !== t) return;\n        f = !1;\n      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n    } catch (r) {\n      o = !0, n = r;\n    } finally {\n      try {\n        if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return;\n      } finally {\n        if (o) throw n;\n      }\n    }\n    return a;\n  }\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport usePhoneDigits from './usePhoneDigits.js';\nimport { metadata as metadataType } from './PropTypes.js';\nfunction PhoneInput(_ref, ref) {\n  var Component = _ref.Component,\n    country = _ref.country,\n    defaultCountry = _ref.defaultCountry,\n    _ref$useNationalForma = _ref.useNationalFormatForDefaultCountryValue,\n    useNationalFormatForDefaultCountryValue = _ref$useNationalForma === void 0 ? true : _ref$useNationalForma,\n    value = _ref.value,\n    onChange = _ref.onChange,\n    metadata = _ref.metadata,\n    international = _ref.international,\n    withCountryCallingCode = _ref.withCountryCallingCode,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  // \"Phone digits\" includes not only \"digits\" but also a `+` sign.\n  var _usePhoneDigits = usePhoneDigits({\n      value: value,\n      onChange: onChange,\n      country: country,\n      defaultCountry: defaultCountry,\n      international: international,\n      withCountryCallingCode: withCountryCallingCode,\n      useNationalFormatForDefaultCountryValue: useNationalFormatForDefaultCountryValue,\n      metadata: metadata\n    }),\n    _usePhoneDigits2 = _slicedToArray(_usePhoneDigits, 2),\n    phoneDigits = _usePhoneDigits2[0],\n    setPhoneDigits = _usePhoneDigits2[1];\n  return /*#__PURE__*/React.createElement(Component, _extends({}, rest, {\n    ref: ref,\n    metadata: metadata,\n    international: international,\n    withCountryCallingCode: withCountryCallingCode,\n    country: country || defaultCountry,\n    value: phoneDigits,\n    onChange: setPhoneDigits\n  }));\n}\nPhoneInput = /*#__PURE__*/React.forwardRef(PhoneInput);\nPhoneInput.propTypes = {\n  /**\r\n   * The phone number (in E.164 format).\r\n   * Examples: `\"+12\"`, `\"+12133734253\"`.\r\n   * An \"empty\" `value` could be represented by any \"falsy\" value like `undefined`, `null` or an empty string `\"\"`.\r\n   */\n  value: PropTypes.string,\n  /**\r\n   * A function of `value: string?`.\r\n   * Updates the `value` property (to `undefined` in case it's empty).\r\n   */\n  onChange: PropTypes.func.isRequired,\n  /**\r\n   * A two-letter country code for formatting `value`\r\n   * as a national phone number (example: `(213) 373-4253`),\r\n   * or as an international phone number without \"country calling code\"\r\n   * if `international` property is passed (example: `213 373 4253`).\r\n   * Example: \"US\".\r\n   * If no `country` is passed then `value`\r\n   * is formatted as an international phone number.\r\n   * (example: `+1 213 373 4253`)\r\n   */\n  country: PropTypes.string,\n  /**\r\n   * A two-letter country code for formatting `value`\r\n   * when a user inputs a national phone number (example: `(213) 373-4253`).\r\n   * The user can still input a phone number in international format.\r\n   * Example: \"US\".\r\n   * `country` and `defaultCountry` properties are mutually exclusive.\r\n   */\n  defaultCountry: PropTypes.string,\n  /**\r\n   * If `country` property is passed along with `international={true}` property\r\n   * then the phone number will be input in \"international\" format for that `country`\r\n   * (without \"country calling code\").\r\n   * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n   * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n   * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n   * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n   * (without \"country calling code\" `+1`).\r\n   */\n  international: PropTypes.bool,\n  /**\r\n   * If `country` and `international` properties are set,\r\n   * then by default it won't include \"country calling code\" in the input field.\r\n   * To change that, pass `withCountryCallingCode` property,\r\n   * and it will include \"country calling code\" in the input field.\r\n   */\n  withCountryCallingCode: PropTypes.bool,\n  /**\r\n   * A component that renders the `<input/>` itself and also\r\n   * parses and formats its `value` as the user inputs it.\r\n   */\n  Component: PropTypes.elementType.isRequired,\n  /**\r\n   * When `defaultCountry` is defined and the initial `value` corresponds to `defaultCountry`,\r\n   * then the `value` will be formatted as a national phone number by default.\r\n   * To format the initial `value` of `defaultCountry` as an international number instead\r\n   * set `useNationalFormatForDefaultCountryValue` property to `true`.\r\n   */\n  useNationalFormatForDefaultCountryValue: PropTypes.bool,\n  /**\r\n   * `libphonenumber-js` metadata.\r\n   */\n  metadata: metadataType\n};\nexport default PhoneInput;","map":null,"metadata":{},"sourceType":"module"}